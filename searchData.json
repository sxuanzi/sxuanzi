[{"title":"git基础","url":"/2018/12/26/git基础/","content":"### 安装github\n<!--more-->\n点击下面的链接可以到达git下载，根据你的安装系统进行安装\n\nhttps://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n<!-- more -->\n\n### 最小配置（配置user信息）\n配置user.name 和user.email 信息\n\n\tgit config --global user.name 'your_name'\n\tgit config --global user.email 'your_email@domain.com'\n\n**配置user信息原因：**每次的变更都是带着个人信息，git会自动的把变更者的信息取出来，然后发送邮件给变更人\n\n其中 --global 的配置是可以更改的\n\n\tgit config --local   //local只对每个仓库有效\n    git config --global   //global对当前用户的所以仓库有效\n\tgit config --system   //system对系统所以登陆的用户有效\n\n仓库：在使用git的时候，git会管理文件系统，比如，你在C盘的git文件中创建了一个git的仓库，这个仓库就相当于一个独立的项目管理的区域；\n\n可以使用 **--list**来查看某个配置的所有的信息,例如\n\t\n\tgit config --list --global \n\n### 创建Git仓库\n两个场景：\n\n1.把已有的项目代码纳入到Git管理\n\t\n\tcd 项目代码所在文件夹\n\tgit init\n\n2.新建的项目直接用Git管理（还没用项目代码）\n\t\n\tcd 某个文件夹\t\n\tgit init your_project_name  #会在当前路径下创建和项目名称同名的文件夹\n\tcd your_project_name\n\n### 往仓库添加文件\n\n**版本历史**<--(git commit -m '添加的原因')--**暂存区**<--（git add files（git add -u :提交所有的文件））-- **工作目录**\n\n### 重命名文件名\n如果使用mv修改文件名，会导致git会重新添加一个文件名，并且原来的的文件也存在\n\n\t\tmv readme  readme.md  //加入文件名叫readme 想要改为readme.md\n\n那么我们就要删除原来的文件\n\n\t \tgit rm readme   //删除readme\n\t\tgit add readme.md   //再添加文件\n\n现在我们重新清除到暂存区里面的东西，使用另外一种方式来重命名：\n\n\tgit reset --hard  //清除暂存区里面所有的东西\n\tgir mv readme  readme.md  //加入文件名叫readme 想要改为readme.md\n\n### git log查看版本演变历史\n\n- git log --all 查看所有分支的历史\n- git log --all --graph 查看图形化的 log 地址\n- git log --oneline 查看单行的简洁历史。\n- git log --oneline -n4 查看最近的四条简洁历史。\n- git log --oneline --all -n4 --graph 查看所有分支最近 4 条单行的图形化历史。\n- git help --web log 跳转到git log 的帮助文档网页\n\n### 通过图形界面查看版本历史\n\t\n\tgitk\n\n![](https://i.imgur.com/J6tCQ1T.png)\n\n\n### 探秘.git目录\nconfig:存放配置信息(我们在配置user信息的时候，配置过config)\n\nHAD:你正在工作在那个分支(编辑head可以进行切换分支)\n\nrefs：存放各个分支，或者是tags的信息 \n\n- tags:存放tag,又名里程碑（项目开发到一定的程序，你就可以标识v1.0，到下一个阶段可以是v2.0）\n- heads:分支，独立的开发空间\n\t- master  属于commit对象\n\t- temp\t\t属于commit对象\n- objects：存放对象 \n\ngit car-file：显示版本库对象的内容、类型及大小信息\n\ngit car-file -t 哈希值：查看该哈希值对象的类型\n\ngit car-file -p 哈希值：查看该哈希值对象的内容\n\ngit car-file -s 哈希值：查看该哈希值对象的大小\t\n\n### 分离头指针\n分离头指针的含义：表示我们正工作在一个没有分支的状态下\n缺点：容易没有在某个分支下进行，git会认为操作的数据，属于垃圾数据，就会导致数据丢失。\n分离头指针的使用：当我们想操作一些变更，但是这个变更你只是尝试下，如果你决定觉得这个变更不好，那么你就可以切换到其他的分支，之前的变更也不会存储\n\n\n\n\n\n\n\n","categories":["java基础"]},{"title":"递归","url":"/2018/11/25/郝斌_递归/","content":"\n## 递归\n\n<!-- more -->\n### 递归的概念\n\t一个函数自己直接或者间接调用自己\n\n### 函数的调用\n\n- 当在一个函数的运行期间调用另一个函数时，在运行被调函数之前，系统需要完成三件事情：\n\t- 1.将所有的实际参数，返回地址等信息传递给被调函数保存\n\t- 2.为被调函数的局部变量（也包括形参）分配空间\n\t- 3.将控制转移到被调函数的入口\n\n- 从被调函数返回主调函数之前，系统也要完成三件事情：\n\t- 1.保存被调函数的返回结果\n\t- 2.释放被调函数所占的存储空间\n\t- 3.依照被调函数保存的返回地址将控制转移到调用函数\n- 当有多个函数相互调用时，按照“后调用先返回”的原则，上述函数之间信息传递和控制转移必须借助“栈”来实现，即系统将整个程序运行时所需的数据空间安排在一个栈中，每当调用一个函数时，就在栈顶分配一个存储区，进行压栈操作，每当一个函数退出时，就释放它的存储区，就行出栈操作，当前运行的函数永远都在栈顶位置\n- A函数调用A函数和A函数调用B函数在计算机看来是没有任何区别的，只不过用我们日常的思维方式理解比较怪异\n\n### 递归必须满足的三个条件\n1. 递归必须得有一个明确的中止条件\n2. 该函数所处理的数据规模必须在递减\n3. 这个转化必须是可解的\n\n### 循环和递归的\n递归：\n\t- 易于理解\n\t- 速度慢\n\t- 存储空间大\n循环\n\t- 不易理解\n\t- 速度快\n\t- 存储空间小\n\t\n### 汉诺塔 \n\n印象笔记\n\n### 走迷宫\n比如有东南西北四个方向，将每一个方向进行压栈处理，当一个方向走完就进行出栈处理。\n\n### 递归的应用\n树和森林就是以递归的方式定义的\n\n数和图很多算法都是以递归来实现的\n\n很多数学公式就是以递归的方式定义的\n\n\n","categories":["数据结构"]},{"title":"队列","url":"/2018/11/24/郝斌_队列/","content":"# 队列\n![](https://i.imgur.com/Hr4AR4L.png)\n\n<!-- more -->\n#### 队列定义：一种可以实现“先进先出”的存储结构\n#### 队列分类\n   \n- 链式队列\n\t- 使用链表实现的\n\t- 使用front（队头）和rear（队尾）来表示\n\t- 对队列的操作为出队和入队\n- 静态队列\n\t- 使用数组实现的\n\t- 静态队列通常都必须是循环队列\n\n## 循环队列的讲解\n\t\n**1. 静态队列为什么必须是循环队列**\n\n\t减少对内存的浪费\n\n\t因为队列是从头部开始删除的，如果删除一个元素，则对头就往上移一个那被删除的空间就不可以再使用了\n\n\t如果我们使用传统的数组来实现静态队列，不管是出队还是入队数组则是一直再增\n\n**2. 循环队列需要几个参数来确定及含义的讲解**\n\n\t- 需要2个参数来确定\n\t\t- front   rear\t\n\n**3.循环队列各个参数的含义**\n\n\t- 2个参数不同场合有不同的含义（建议初学者先记住，然后慢慢体会）\n\t\t- 1）队列初始化\n\t\t\t-  font和rear的值都是零\n\t\t- 2）队列非空\n\t\t\t- font代表的是队列的第一个元素\n\t\t\t- rear代表的是队列的最后一个有效元素\n\t\t- 3）队列空\n\t\t\t- font和rear的值相等，但不一定是零\n\n**4. 循环队列入队伪算法讲解**\n\t\n\t两步完成：\n\t\t将值存入r所代表的位置\n\t\t错误的写法r= r+1;\n\t\t正确的写法是： r = (r+1) %数组的长度\n\n**5. 循环队列出队伪算法讲解**\n\n\t一步完成：\n\t\tf = （f+1）%数组的长度\n\n**6. 如何判断循环队列是否为空**\n\n\t如果front与rear的值相等，\n\t则该队列一定为空\n\n**7. 如何判断循环队列是否已满**\n  \n\t两种方式：\n\t\t1.多增加一个标志参数\n\t\t2.少使用一个元素（常用）：如果r和f的值紧挨着，则队列已满\n\t\t算法： if((r+1)%数组长度==f)\n\t\t\t\t已满\n\t\t\t  else\n\t\t\t\t不满\n\n## 队列的算法\n出队\n\n xunhuan.c\n\n入队\n\n## 队列的具体应用\n\t\n所以和时间的有关的操作都有队列的影子\n\n","categories":["数据结构"]},{"title":"线性结构","url":"/2018/11/23/郝斌_线性结构/","content":"\n## 线性结构\n\t\n### 连续存储[数组]\n\t\n##### 1.什么叫做数组\n\n  元素类型相同，大小相同\n\n### 连续存储数组的算法\n\t代码：Arr.c\n\n\n### typedef的用法\n\t\n\ttypedef int zhangsan;//为int再重新多取一个名字，zhangsan等价于int\n\ttypedef struct Student{\n\t\tint sid;\n\t\tchar name[100];\n\t\tchar sex;\n\t}st;\n\t\n\tint main(void){\n\t\tint i =10;  //等价于zhangsan i =10;\n\n\t\t//struct Student st;    //等价于st s;\n\t\t//struct Student * ps = &st;  //等价于st * sp;\n\n\t\treturn 0;\n\t}\n\n-------- \n\n\ttypedef struct Student{\n\t\t\tint sid;\n\t\t\tchar name[100];\n\t\t\tchar sex;\n\t}* pst; //pst 等价于struct Student *\n\t/*\n\t\tstruct Student{\n\t\t\tint sid;\n\t\t\tchar name[100];\n\t\t\tchar sex;\n\t\t}*  整体为一个类型\n\t*/\n\n\ttypedef struct Student{\n\t\t\tint sid;\n\t\t\tchar name[100];\n\t\t\tchar sex;\n\t}* PST，ST;  //等价于st代表了struct Student ,pst 代表了struct Student *   一般别名都用大写\n\n\tint main(void){\n\t\treturn 0;\n\t}\n\n### 离散存储[链表]\n\n定义：\n\n- n个节点离散分配\n- 彼此通过指针相连\n- 每个节点只有一个前驱结点,每个节点只有一个后续节\n- 首节点每页前驱结点，尾节点每页后续节点\n\n**专业术语**：\n\n- 首节点：第一个有效节点\n- 尾节点：最后一个有效节点\n- 头节点：不存放有效数组，头节点指向首节点（第一个有效节点之前的那个节点），主要是为了方便对链表的操作，头节点的数据类型和首节点的类型是一样的\n- 头指针：指向头节点的指针变量\n- 尾指针：指向尾节点的指针变量\n\n**如果希望通过一个函数来对链表进行处理，我们至少需要接受链表的那些参数：只需要一个参数：头指针（因为我们通过头指针可以推算出链表的其他所有的信息）**\n\n\n### 每一个链表节点的数据类型该如何表示的问题\n\t//一个结构体变量的成员指向它本身（它本身的数据类型是一样的另外一个变量）\n\ttypedef struct Node{\n\t\tint data;//数据域\n\t\tstruct Node * pNext; //指针域\n\t}\n\n\n### 链表分类：\n\n单链表\n\t\n双链表：每一个节点有两个指针域\n\t![](https://i.imgur.com/MEu0Cs8.png)\n\n\n循环链表：能通过任何一个节点找到其他所有的节点\n\n非循环链表：\n\n### 算法：\n\n伪算法：\n![](https://i.imgur.com/TtjiMHh.png)\n\n![](https://i.imgur.com/hsXfpJp.jpg)\n\n\n算法：\n\t \n狭义的算法是与数据的存储方式密切相关\n广义的算法是与数据的存储方式无关\n\n泛型：利用某种技术达到的效果就是：不同的存数方式，执行的操作是一样的\n\n\n\n遍历\n\n查找\n\n清空\n\n销毁\n\n求长度\n\n排序\n\n删除节点\n\n如何去学习算法：\n1.流程\n2.每个语句的功能\n3.试数\n先看着敲一遍代码然后自己敲一遍代码\n\n\n## 复习\n数据结构：\n\n\t狭义：\n\t\t数据结构是专门研究数据存储的问题\n\t\t数据的存储包含两方面：个体的存储+个体关系的存储\n\t广义：\n\t\t数据结构即包含数据的存储也包含数据的操作\n\t\t算法是对存储数据的操作\n\n算法：\n\t \n\t狭义\n\t\t算法是与数据的存储方式密切相关\n\t广义\n\t\t算法是与数据的存储方式无关\n\t\t这就是泛型思想\n\n数据的存储有几种：\n\n\t线性\n\n\t\t连续存储【数组】\n\t\t\t优点：存取速度很快\n\t\t\t缺点：插入删除很慢，空间通常是有限制的，需要大块连续的内存块\n\t\t离散存储【链表】\n\t\t\t优点：空间没有限制，插入删除元素很快\n\t\t\t缺点：存取速度很快\n\t\t线性结构的应用 --栈\n\n\t\t线性结构的应用 --队列\n\n\t非线性\n\t\t\n\n\n## 线性结构的两种常见应用之一  栈\n![](https://i.imgur.com/4zANaDS.png)\n\n【静态内存是在栈中分配的，动态内存是在堆里面分配的】\n\n栈和堆表示的是分配数据的一种方式\n栈：压栈出栈的方式  堆：堆排序的方式\n \n### 定义：\n\n一种可以实现“现今后出”的存储结构\n\n栈类似于箱子\n### 分类：\n静态栈：(以数组为它的基本内核)\n动态栈：（以链表为它的基本内核）\n\n### 算法\n出栈\n压栈\n\n### 应用\n栈程序演示\n  栈：top和button\n\t\n### 栈的应用\n函数调用，中断，表达式求值，内存分配，缓冲处理，迷宫\n\t\n\n\n\n\t","categories":["数据结构"]},{"title":"数据结构概述","url":"/2018/11/22/郝斌_c语言数据结构预备知识/","content":"\n<!-- more -->\n# 一、数据结构概述\n### 1.什么是数据结构？\n  我们如何把现实中大量而复杂的问题以特定的数据类型和特定的存储结构保存到主存储器（内存）中，以及在此基础上为实现某个功能（比如查找某个元素，删除某个元素，对所有元素进行排序）而执行的相应操作，这个相应的操作也叫算法\n    \n    数据结构 = 个体的存储 + 个体的关系存储；\n    算法 = 对存储数据的操作；\n\n\n\n\n\n### 2.衡量算法的标准\n- 1）时间复杂度：大概程序执行的次数，而非执行的时间\n- 2）空间复杂度： 算法执行过程中大概所占用的最大内存\n- 3）难易程度\n- 4）健壮性\n\n### 3.预备知识——指针\n **指针的重要性：**\n指针是C语言的灵魂\n\n**地址：**地址是内存单元的编号，从0开始的非负整数，范围：0-FFFFFF【0-4 G-1】\n\n\t\tCPU==========-地址线，控制线，数据线 ===========内存\n\n**指针：**\n指针就是地址，地址就是指针。\n指针变量是存放内存单元地址的变量。\n指针的本质是一个操作受限的非负整数。\n\n**分类**\n\n###### 1.基本类型指针\n\t\n\t    \tInt *p;  //*p要保存一个内存地址（p是个变量名字，int *表示该p变量只能存储int类型变量的地址）\n    \t\tInt i = 10;\n    \t\tInt j;\n    \t\tj=*p;\n\n\t\t\tchar ch = 'A';\n\t\t//\tp =&ch;//error\n        //  p =10；//error\n            p = &i;//正确\t\t\n\t\t\t*p =i;//error  等价于i=i\n\t\t\t//上行代码表示p指向i，则p就是i\n            j = *p;  //等价于j=i\n    \t\tPrintf(“%d\\n”,j)\n###### 函数\n\tvoid f(int *p){  //不是定义一个名字*p的形参，而是定义了一个形参，该形参的名字叫做p，它的类型是int *(p指向了i,p就是i)\n\t\t*p = 100;\n\t}\n\n\tmain{\n\t\tint i =9;\n\t\tf(&i);\n\t}\n###### 如何通过被调函数修改主调函数中普通变量的值\n\n\t-实参为相关变量的地址\n\t-形参为以该变量类型为类型的指针变量\n\t-在被调函数中通过 *形参变量名 的方式就可以修改主调函数的值\n###### 指针和数组\n\tShow_Array(int *p, int len){\n\t\tint i =0;\n\t\tfor\n\n\t\t//p[0] = -1;   //p[0] == *p\n\t\t//p[2] = -1;   //p[2] == *(p+2) == *(a+2) ==a[2]\n\t}\n\tmain(void){\n\t\tint a[5] = {1,2,3,4,5,};  //\n\t\tShow_Array(a,5) //数组名表示的就是第一个元素的地址,a==&a[0]\n\t}\n\n###### 数组名：\n\n    一维数组名是个指针常量，\n\t它存放的是一维数组第一个元素的地址\n\t它的值不能被变\n\t一维数组名指向的就数组的第一个元素\n###### 下标和指针的关系\n\n\ta[i]  <<==>> *(a+i)\n\n###### 指针变量所占的字节关系\n\n\tdouble * p;   \n    doubl x = 66.6;\n\tp = &x;//x占8个字节  1个字节是8(#`O′)，1个字节一个地址,p存放的是x的首地址\n\t//不论指针变量指向的地址占多少个字节，指针变量都统一占4个字节\n\n###### 如何以过函数修改实参的值\n\n\tmain(void){\n\t\tint i=0;\n\t\tint * p = &i;\n\n\t\tf(&p);\n\t}\n\tf(int **p){\n\t\t*p=(int *)OxFFFFFF;\n\t}\n** 结构体：**\n\n1).为什么会出现结构体\n\n-- 为了表示一些复杂的数据，而基本的数据类型变量无法满足要求\n\n2）什么叫结构体\n\n-- 结构体是用户根据实际需要自己定义的复合数据类型\n\n3）结构体的定义方法\n\n\t\tStrcut 结构体名{   \n\t\t\t内容：例如：int name\n\t\t};  //分号不能省\n\n\t\t//例如：该下列代码：定义了一个 strucut Student类型，该类型有三个成员\n\t\tstrcut Student{\n\t\t\tint sid;\n\t\t\tchar name[200];\n\t\t\tint age;\n\t\t}\n\t\tmain(void){\n\t\t\t//第一个赋值方法和定义\n\t\t\tstruct Student st = {1000.\"zhangsan\",20};\n\t\t\tst.sid = 99;\n\t\t\tstrcopy(st.name,\"list\");\n\t\t\tst.age = 33;\n\t\t}\n\n第二种赋值方法\n\t\t\n\tmain(void){\n\t\tstruct Student st = {100,\"zhangsan\",20};\n\t\t\n\t\tstruct Student * pst = &st;\n\t\t\n\t\tpst->sid = 99； //pst->等价于(*pst).sid  而(*pst).sid等价于st.sid，使用pst->sid 等价于st.sid\n\t//\tpst所指向的结构体变量中的sid这个成员\n\t}\n注意事项:\n\n\t/**1)结构体变量不能加减乘除，但可以相互赋值。\n      *2)普通结构体变量和结构体指针变量作为函数传参问题\n\t   */\n\tmain(void){\n\t\tstruct Student st;  //静态变量\n\t\tf(&st);\n\t\tg(&st);\n\t}\n\n\tvoid g(struct Student * st){\n\t\tprintf(*(st).sid);\n\t\tprintf(st->name);\n\t}\n\tvoid f(struct Student * pst){\n\t\t(*pst).sid = 99;\n\t\tstrcpy(pst->name,\"zhangsan\");\n\t\tpst->age = 22;\n\t}\n\t\n\n**C语言字符串赋值要使用：**\n\n\t\tstrcpy(st.name,”list”);\n\n### 动态内存的分配和释放\n\n\tmain(void){\n\t\tint a[5] = {4,2,4,5,6};\n\t\tint len = 5;\n\t\tprintf(\"请输入你需要分配的数组的长度：len=\");\n\t\tscanf(\"%d\", len);\n\t\t//把你请求需要的字节的地址赋给pArr  malloc只返回第一个字节的地址   sizeof(int)表示返回int类型所占字节\n\t\t//下述代码表示：总共分配了20个字节，pArr指向的前四个字节 pArr+1指向的后四个字节 和a[5]意思相同，a[5]\n\t\t//静态变量，下述代码表示动态变量\n\t\tint * pArr = (int *)malloc(sizeof(int) * len);\n\t\t*pArr = 4;   //等价于 a[0] =4;\n\t\tpArr[1] = 10; //等价于a[1] = 10;\n\n\t\t//下述代码：把pArr所代表的动态分配的20个字节的内存释放\n\t\tfree(pArr);\n\t\treturn 0;\n\t}\n\n### 跨函数使用内存讲解\n\t通过动态分配内存，可以使得跨函数使用内存\n","categories":["数据结构"]},{"title":"java内存分配","url":"/2018/11/21/java内存分配/","content":"\n<!--more-->\n**栈区（stack）**：由编译器自动分配释放，存放函数的参栈区（stack），由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n<!--more-->\n\n**堆区（heap）**：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。注意它与数据结构中的堆是两回事，链表的数据空间必须采用堆存储分配策略。\n\n**全局区（静态区）（static）**：全局变量和静态变量的存储是放在这一块的。初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序结束后由系统释放。\n\n**文字常量区：常量字符文字常量区**：常量字符串就是放在这里的，程序结束后由系统释放。\n\n**程序代码区：**存放函数体的二进制代码。","categories":["java基础"]},{"title":"数组","url":"/2018/11/21/数组/","content":"\n<!-- more -->\n### 什么是数组？\n\n数组是一种线性表数据结构，他用一组连续的内存空间，来存储一组具有相同类型的数组。\n\n**线性表:**就是数据排成一条线的结构\n\n### 随机访问？\n因为数组是连续内存空间和一组相同类型，可以使的数据具有随机访问性。\n\n### 数组如何实现随机访问性？\n计算机会给每个内存分配一个地址，计算机通过地址来访问内存的数据，当计算机随机访问数组中的某个元素时:可以通过寻址公式来查找数据:\na[i]_address = base_address + i * data_type_size\n\n### 低效的“删除”和“插入”\n**插入**\n\n在数组中插入一个值，假设数组长度为n，我们要在末尾插入，时间复杂度则为O(1)，如果在k的位置插入则为O(n)，其实我们可以在k要删除的位置元素，我们可以将k的数据搬到元素的末尾，将新元素插入到k位置。\n\n**删除**\n\n每次要删除的时候，我们可以记录下要删除元素的数据，当数组没有存储空间的时候，一次性触发删除。\n\n### 为什么数组是从0开始的？\n数组的存储的内存模型来看，“下标”简称偏移量，如果a表示数组的首地址，a[0]就是偏移量为0的位置，也就是首地址，a[k] 就表示偏移 k 个 type_size 的位置，运用的就是上面那个公式。如果数组从1开始，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。","categories":["数据结构"]},{"title":"链表","url":"/2018/11/21/链表/","content":"\n\n<!-- more -->\n### 什么是链表？\n通过指针将离散的内存空间连接一起。\n### 什么叫节点？\n将内存快称为节点\n### 什么叫做后续指针next？\n\n每个链表的结点除了存储数据，还需要存储链上指向下一个结点的地址。\n\n记录下结点地址的指针叫做后续指针next\n\n链表有两个特殊的节点\n\n- 一个是叫做头结点\n- 一个叫做尾结点\n\n### 什么叫做头结点？\n头结点用来记录链表的基地址\n\n### 什么叫做尾结点？\n\n指针不是指向下一个结点地址，而是指向一个NULL地址，表示链表的最后一个结点。\n\n- 链表的插入和删除结点O(1)\n- 链表的随机访问性度O(n)\n\n### 循环链表\n就是将尾结点的指针指向链表的头结点\n\n### 双向链表\n每个结点有一个前驱指针prev指向前面的结点,还有一个后续指针next指向后面的结点\n好处:双向链表可以支持在O(1)时间复杂度的情况下找到前驱结点\n\n**思考:**\n通过学习，我们以后知道一个很重要的知识点:用空间换时间的设计思想，当内存充足的时候，如果我们追求代码执行的速度，空间复杂度比较高，时间复杂度比较低的算法和数据结构。如果内存比较紧缺，比如代码是执行在手机或者单片机上，这个时候就反过来用时间换空间的设计思想。\n\n**缓存就是利用了空间换时间的设计思想。**\n\n### 链表VS数组\n数组内存大小固定，不能扩容(如果要扩容就需要申请一个更大的数组，如何将原数组copy到新的数组中。)，随机访问数组高效，插入删除低效\n链表:支持动态扩容，内存不限限制，因为链表每个结点都需要存下一次结点的指针，消耗内存翻倍，对链表的频繁删除和插入导致内存碎片。随机访问链表O(n)，插入删除O(1)","categories":["数据结构"]}]